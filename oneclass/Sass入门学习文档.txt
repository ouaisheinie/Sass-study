<link type = "stylesheet" href="style/index.css">  这个是对的  CSS文件可以这样引用  但是sass 文件就不能这样引用了

<link type = "stylesheet" href="style/index.scss">
<link type = "stylesheet" href="style/index.scss">  

在HTML文件里引用sass  需要先编译   先把sass 编译成css   然后 在html中引用

编译可以用  命令行工具   也可以用第三方软件   vscode 可以   


1. 安装sass   先安装ruby   目前选择在windows下    在命令行  sass -v  查看电脑是否安装sass

2.编译工具 
    1.命令行编译
    //单文件转换命令
    sass input.scss output output.css
    //单文件监听命令
    sass --watch input.scss:output.css
    //如果你有很多的sass文件的目录，你也可以告诉sass 监听整个目录
    sass --watch app/sass:public/stylesheets
    
    2.图形化编译   运用考拉来编译

    3.webstrom 的 file watcher   或者  VSCode的编译插件

3. sass 和 scss
    开发的时候 更推荐用scss  更接近css

4.变量
    sass里  变量以美元符号$来开头

5.编译错误
    sass或者scss 文件里  是默认utf-8编码    但是里面有中文字符  也会引起编译错误

6.sass不同样式风格的输出方法
    1.嵌套输出方式 nested
        1.sass提供了一种嵌套显示CSS文件的方法
                nav{
                    ul{
                        margin:0;
                        padding:0;
                        list-style:one;
                    }
                    li{display:inline-block;}
                    a{
                        display:block;
                        padding:6px 12px;
                        text-decoration:none;
                    }
                }

        -----上面的代码 编译的时候 带上参数 --style nested
        sass --watch test.scss:test.css --style nested
        编译出来就是如下

                nav ul {
                    margin: 0;
                    padding: 0;
                    list-style: none; }
                nav li {
                    display: inline-block; }
                nav a {
                    display: block;
                    padding: 6px 12px;
                    text-decoration: none; }
    2.展开输出方式 expanded
        跟上面输出一样   只是展开后 每个类的后面的"}"换到下一行了

            nav ul {
                    margin: 0;
                    padding: 0;
                    list-style: none; 
                    }
            nav li {
                    display: inline-block; 
                    }
            nav a{
                    display: block;
                    padding: 6px 12px;
                    text-decoration: none; 
                }
    2.紧凑输出方式 compact
        nav ul { margin: 0; padding: 0; list-style: none; }
        nav li { display: inline-block; }
        nav a { display: block; padding: 6px 12px; text-decoration: none; }
    4.压缩输出方式 compressed
        nav ul{margin:0;padding:0;list-style:none}nav li{display:inline-block}nav a{display:block;padding:6px 12px;text-decoration:none}


7.sass中的声明变量
    1.生命变量用美元符号$
    2.变量名称
    3.赋予变量的值
    4.!default 表示默认值  例如 $btn-primary-color:#fff !default;

8.普通变量与默认变量
    1.普通变量  定义之后可以在全局范围内使用
    $fontSize:12px;
    body{
        font-size:$fontSize;
    }

    2.默认变量 sass的默认变量仅需要在值后面加上!default即可
    $baseLineHeight:1.5 !default;
    body{
        line-height:$baseLineHeight;
    }
        1.默认变量的覆盖
        只需要在默认变量之前重新定义一下  例如
        $baseLineHeight: 2;
        $baseLineHeight: 1.5 !default;
        body{
            line-height: $baseLineHeight; 
        }
    ！！！！！默认变量的价值在进行组件化开发的时候非常有用。

9.sass变量的调用
    1.sass变量在声明之后 就可以在需要的地方调用变量了  调用变量的方法也非常简单
    就是类似之前我们一直都在调用着用了  哈哈哈哈

10.局部变量和全局变量
    sass里变量的作用在过去几年已经发生了一些改变。知道最近，规则集和其他范围内生命变量的作用于才被默认为本地。如果已经存在同名的全局变量，从3.4版本开始。sass已经可以正确处理作用域的概念，并通过创建一个新的局部变量来代替。
    例子：
    //scss
    $color:orange !default;
    //定义全局变量(在选择器，函数，混合宏..的外面定义的变量为全局变量)
    .block{
        color:$color;//调用全局变量
    }
    em{
        $color:red;//定义局部变量
        a{
            color:$color;调用的局部变量
        }
    }
    span{
        color:$color;//的调用的全局变量
    }

    sass还提供一个!global参数  
    !global 和 !default对于定义变量都是很有帮助的。
    我们之后将会详细介绍这两个参数的使用以及其功能。

    全局变量的影子
    当在局部范围(选择期内,函数内,混合宏内...)生命一个已经存在的全局范围内的变量时，局部变量变量就成为了全局变量的影子。“基本上，局部变量只会在局部范围内覆盖全局变量。”

    什么时候声明变量？
    创建变量只适用于感觉确有必要的情况下。不要为了某些骇客行为而声明变量，这些丝毫没有作用。只有满足所有下述标准时方可创建新变量：
        1.该值至少重复出现两次；
        2.该值至少可能会被更新一次；
        3.该值所有的表现都与变量有关(非巧合);
    基本上没有理由声明一个永远不需要更新或者只在单一地方使用的变量。

11.sass嵌套  选择器嵌套
    1.sass中也提供了选择器嵌套功能，但也并不意味着你在sass中的嵌套是无节制的，因为你嵌套的层级越深，编译出来的CSS代码的选择器层级将越深，这往往是大家不愿意看到的一点，这个特性正在被众多开发者滥用。

    2.选择器嵌套的样式表的作者提供了一个通过局部选择器互相嵌套实现全局选择的方法，Sass的嵌套分为三种：
        1.选择器嵌套
        2.属性嵌套
        3.伪类嵌套
    3.嵌套结构钟的 "&" 符号 代表当前作用于的嵌套集

12.sass嵌套  属性嵌套
    sass钟海提供属性嵌套:css有一些属性前缀相同，只是后缀不一样,比如border-top/border-right,与这个类似的还有margfin,padding,font等属性，假设你的样式中用到了
    .box{
        border-top:1px solid red;
        border-bottom:1px solid green;
    }
    在Sass中，我们可以把上面的代码这样写
    .box{
        border:{
            top:1px solid red;
            bottom:1px solid green;
        }
    }

13.sass嵌套  伪类嵌套
    1.其实伪类嵌套和属性嵌套非常类似，只不过它需要借助符号 "&"符号一起配合使用。我们就拿经典的clearfix为例
    .clearfix{
        $:before,
        $:after{
            content:"";
            display:table;
        }
        $:after{
            clear:both;
            overflow:hidden;
        }
    }
    上面的代码编译出来的CSS 为
    .clearfix:before,.clearfix:after{
        content:"";
        display:tabel;
    }
    .clearfix:after{
        clear:both;
        overflow:hidden;
    }
    但是我们应该避免选择器嵌套   显然 只有少数情况适应这一措施

14.混合宏 声明混合宏
    如果整个网站中有基础小样式类似，比如颜色或者字体等。在Sass可以使用变量来统一初六，那么这种选择还是不错的。当然你的样式越变越复杂，需要重复使用大段的样式时，使用变量就无法达到完美的目的了，这个时候Sass钟的混合宏就会变得非常有意义。
    下面主要介绍Sass中的混合宏

    1.声明混合宏
        不带参数混合宏
        在Sass中，使用"@mixin"来声明一个混合宏。如：
        @mixin border-radius{
            -webkit-border-radius:5px;
            border-radius:5px;
        }
        其中 @mixin 是用来声明混合宏的关键词,有点类似Css中的@media，@font-face一样。border-radius是混合宏的名称，大括号里面是复用的样式代码。

    2.带参数的混合宏
        1.除了声明一个不带参数的混合宏之外，还可以在定义混合宏时带有参数，如:
            @mixin border-radius($radius:5px){
                -webkit-border-radius:$radius;
                border-radius:$radius
            }

    3.复杂的混合宏
        1.上面是一个简单的定义混合宏的方法，当然，Sass钟的混合宏还提供更为复杂的，你可以在大括号里面写上带有逻辑关系，帮助更好的做你想做的事情.如：
        @mixin box-shadow($shadow...){
            @if length($shadow) >= 1{
                @include prefixer(box-shadow,@shadow);
            }@else{
                @shadow:0 0 4px rgba(0,0,0,.3);
                @include prefixer(box-shadow,$shadow);
            }
        }
        这是一个box-shadow的混合宏，带有多个参数，这个时候可以使用"..."来代替。简单的解释一下，当$shadow的参数数值大于或者等于1的时候，表示有多个阴影值，反之调用默认的参数值"0 0 4px rgba(0,0,0,.3)"
        注意:复杂的混合宏钟的逻辑关系(@if...@else)后面的小节会有讲解

15.sass混合宏-调用混合宏
    1.在Sass钟通过@mixin关键词声明了一个混合宏，那么在实际调用钟，其匹配了一个关键词"@include"来调用声明好的混合宏(如上面第14点里的);例如在你的样式中定义了一个圆角的混合宏"border-radius":
    @mixin border-radius{
        -webkit-border-radius:3px;
        border-radius:3px;
    }
    在一个按钮中药调用定义好的混合宏"border-radius",可以这样使用:
    button{
        @include border-radius;
    }
    这个时候编译出来的CSS就是如下
    button{
        -webkit-border-radius:3px;
        border-radius:3px;
    }

16.混合宏的参数--传一个不带值的参数
    1.Sass的混合宏有一个极其强大的功能，可以传参数，那么在Sass钟传参数主要有一下几种情形:
        1.传一个不带值的参数
            在混合宏中，可以传一个不带任何值的参数，比如：
            @mixin border-radius($radius){
                -webkit-border-radius:$radius;
                border-radius:$radius;
            }
            在混合宏"border-radius"中定义了一个不带任何值的参数"$radius"。
            在调用的时候可以给这个混合宏传一个参数值:
            .box{
                @include border-radius(3px);   //调用的时候给参数定值,haha
            }
            这里表示给混合混传递了一个 "border-radius"的值为 "3px".
            所以 编译出来的CSS 如下
            .box{
                -webkit-border-radius:3px;
                border-radius:3px;
            }
    2.传递一个带值的参数
        1.在Sass的混合宏钟，还可以给混合宏的参数传一个默认值，例如:
        @mixin border-radius($radius:3px){   //此处仅仅只是默认值  需要其他值 可以调用的时候给出
            -webkit-border-radius:$radius;
            border-radius:$radius;
        }
        在混合宏"border-radius"传了一个参数"$radius"，而且给这个参数赋予了一个默认值"3px".
        在调用类似这样的混合宏时，会多有一个机会，假设你的页面中的圆角很多地方都是3px的圆角，那么这个时候需要调用默认混合宏"border-radius"：
        .btn{
            @include border-radius;
        }
        编译出来的CSS
        .btn{
            -webkit-border-radius:3px;
            border-radius:3px;
        }
        但是有的时候，页面中有些元素的圆角值不一样，那么可以随机给混合宏传值，如:
        .box{
            @include border-radius(50%);//在调用的时候给出其他值
        }
        编译出来的CSS
        .box{
            -webkit-border-radius:50%;
            border-radius:50%;
        }

    3.传递多个参数
        1.Sass混合宏除了能传一个参数之外，还可以传递多个参数，如:
        @mixin center($width,$height){   //混合宏center  传递了多个参数(2个极以上)
            width:$width;
            height:$height;
            position:absolute;
            top:50%;
            left:50%;
            margin-top:-($height)/2;
            margin-left:-($width)/2;
        }
        实际调用和其他混合宏是一样的
        .box-center{
            @include center(500px,300px);
        }

        2.有一个特别的参数"..."。 当混合宏传的参数过多时，可以使用这个"..."来代替，例如
        @mixin box-shadow($shadow...){   //"..."参数
            @if length($shadow) >= 1{
                -webkit-box-shadow:$shadows;
                box-shadow:$shadows;
            } @else {
                $shadow: 0 0 2px rgba(#000,.25);
                -webkit-box-shadow:$shadow;
                box-shadow:$shadow;
            }
        }
        接下来是调用:
        .box{
            @include box-shadow(0 0 1px rgba(#000,.5),0 0 2px rgba(#000,.2));
        }
        编译出来的CSS：
        .box{
            -webkit-box-shadow:0 0 1px rgba(0,0,0,0.5),0 0 2px rgba(0,0,0,0.2);
            box-shadow:0 0 1px rgba(0,0,0,0.5),0 0 2px rgba(0,0,0,0.2);
        }

17.混合宏的参数--混合宏的不足
    1.混合宏在实际编码中给我们带来了很多方便之处，特别是对于复用重复代码块。但其最大的不足之处是会生成冗余的代码块。比如在不同的地方调用一个相同的混合宏时。如:
    @mixin border-radius{
        -webkit-border-radius:3px;
        border-radius:3px;
    }
    .box{
        @include border-radius;
        margin-bottom:5px;
    }
    .btn{
        @include border-radius;
    }
    编译出来的CSS如下
    .box{
        -webkit-border-radius:3px;
        border-radius:3px;
        margin-bottom:5px;
    }
    .btn{
        -webkit-border-radius:3px;
        border-radius:3px;
    }
    从以上可以看出 Sass在调用相同的混合宏时，并不能智能地将相同的样式的代码块合并到一起。这也是Sass的混合宏最不足之处

18.Sass的扩展和继承
    1.在Sass中也有继承依说，也是继承类中的样式代码块。在Sass中是通过关键词"@extend"来继承已经存在的类样式块，从而实现代码的继承，如下所示:
    //scss
    .btn{
        border:1px solid #ccc;
        padding:6px 10px;
        font-size:14px;
    }
    .btn-primary{
        background-color:#f36;
        color:#fff;
        @extend .btn;
    }
    .btn-second{
        background-color:orange;
        color:#fff;
        @extend .btn;
    }
    //编译出来之后 CSS
    .btn,.btn-primary,.btn-second{
        border:1px solid #ccc;
        padding:6px 10px;
        font-size:14px;
    }
    .btn-primary{
        background-color:#f36;
        color:#fff;
    }
    .btn-second{
        background-color:orange;
        color:#fff;
    }
    从代码中可以看出，在Sass中的继承，可以继承类样式块中所有样式代码，而且编译出来的CSS会将选择器合并在一起，形成组合选择器:
    .btn,.btn-primary,.btn-second{
        border:1px solid #ccc;
        padding:6px 10px;
        font-size:14px;
    }
    
19.Sass占位符 %placeholder
    Sass中的占位符 %placeholder功能是一个强大的，很实用的工程。它可以取代以前CSS中的基类造成的代码冗余的情形，因为%placeholder声明的代码，如果不被@extend调用的话，不会产生任何代码，来看一下:

    %mt5{
        margin-top:5px;
    }
    %pt5{
        padding-top:5px;
    }
    这段代码没有被@extend调用，其并没有产生任何代码块，只是静静地躺在你的某个SCSS文件中，只有通过@extend调用才会有代码产生：
    //scss
    %mt5{
        margin-top:5px;
    }
    %pt5{
        padding-top:5px;
    }
    .btn{
        @extend %mt5;
        @extend %pt5;
    }
    .block{
        @extend %mt5;

        span{
            @extend %pt5;
        }
    }
    编译出来的CSS
    .btn,.block{
        margin-top:5px;
    }
    .btn,.block span{
        padding-top:5px;
    }

20.Sass 混合宏 VS 继承 VS 占位符
    1.初学者都常常纠结这个问题：什么时候用混合宏，什么时候用继承，什么时候用占位符？其实他们各有优点和缺点，先来看看他们的使用效果。
        1.Sass中混合宏的使用
        @mixin mt($var){
            margin-top:$var;
        }
        .block{
            @include mt(5px);
            span{
                display:block;
                @include mt(5px);
            }
        }
        .header{
            color:orange;
            @include mt(5px);
            
            span{
                display:block;
                @include mt(5px)
            }
        }
        //编译出来的CSS
        .block {
            margin-top: 5px;
            }
            .block span {
            display: block;
            margin-top: 5px;
            }
            .header {
            color: orange;
            margin-top: 5px;
            }
            .header span {
            display: block;
            margin-top: 5px;
            }
        总结一下: 混合宏 编译出来的CSS清晰地告诉了大家,他不会自动合并相同的样式代码，如果在样式文件中调用同一个混合宏，会产生多个对应的样式代码，造成代码的冗余，这也是CSSer无法忍受的一件事情，不过他并不是一无是处，他可以传参数。
        建议：如果你的代码中涉及变量，建议使用混合宏来创建相同的代码块.
    
    2.Sass中的继承 
        同样的，将上面的代码中的混合宏，使用类名来表示，然后通过继承来调用:
        .mt{
            margin:5px;
        }
        .block{
            @extend .mt;
            span{
                display:block;
                @extend .mt;
            }
        }
        .header{
            color:orange;
            @extend .mt;
            span{
                display:block;
                @extend .mt;
            }
        }
        编译出的CSS代码如下
        .mt, .block, .block span, .header, .header span {
        margin: 5px;
        }

        .block span {
        display: block;
        }

        .header {
        color: orange;
        }

        .header span {
        display: block;
        }
        总结:使用继承后，编译出来的CSS会将使用继承的代码块合并到一起，通过组合选择器的方式向大家展现，比如.mt,.block,.block span,.header,.header span.这样的编译出来的代码相对于混合宏来说要干净很多，也是CSSer希望看到的。但继承不能传递参数和变量.
        建议:如果你的代码块不需要专任何变量参数，而且有一个基类已经在文件中存在，那么建议使用Sass的继承。
    3.Sass中的占位符
        %mt{
            margin-top:5px;
        }
        .block{
            @extend %mt;
            span{
                display:block;
                @extend %mt;
            }
        }
        .header{
            color:orange;
            @extend %mt;
            span{
                display:block;
                @extend %mt;
            }
        }
        编译出来的CSS如下
        .block, .block span, .header, .header span {
        margin-top: 5px;
        }

        .block span {
        display: block;
        }

        .header {
        color: orange;
        }

        .header span {
        display: block;
        }
    总结:编译出来的CSS代码和使用继承基本上相同，只是不会再代码中生成占位符Mt的选择器。那么占位符和继承的主要却别的。
        占位符是独立定义的，不调用的时候不会再CSS中产生任何代码；继承是首先由一个基类存在，不管调用与不调用，基类的样式都会出现在编译出来的CSS代码中。

21.Sass 插值 #{}
    1.使用CSS预处理器语言的一个主要原因是想使用Sass获得一个更好的结构体系。比如说你想写更干净的，搞笑的和面向对象的CSS。Sass中的插值就是重要的一部分，让我们看一下下面的例子:
    $porperties:(margin,padding);
    @mixin set-value($side,$value){
        @each $prop in $properties{
            ${$prop}-#{$side}:value
        }
    }
    .login-box{
        @include set-value(top,14px);
    }
    @each..in..语句  会在 Sass进阶篇中 1-6的 @each循环中讲解.
    它可以让变量和属性工作的很完美，上面的带面编译成CSS:
    .login-box{
        margin-top:14px;
        paddding-top:14px;
    }
    这是Sass 插值中的一个简单的实例。当你想设置属性的时候你可以使用字符串插入进来。另一个有用的用法是构建一个选择器，可以这样使用:
    @mixin generate-sizes($class,$small,$medium,$big){
        .#{$class}-small {font-size:$small;}
        .#{$class}-medium {font-size:$medium;}
        .#{$class}-big {font-size:$big;}
    }
    @include generate-sizes("header-text",12px,20px,40px);
    上面的代码编译出来的CSS：
    .header-text-small{font-size:12px;}
    .header-text-medium{font-size:20px;}
    .header-text-big{font-size:40px;}
    一旦你发现这一点，你就会想到超级酷的mixins，用来生成代码或者生成另一个mixixs。然而，这并不完全是可能的。第一个限制，这样可能会很删除用于Sass变量的插值。
    $margin-big:40px;
    $margin-medium:20px;
    $margin-small:12px;
    @mixin set-value($size){
        margin-top:$margin-#{$size};
    }
    .login-box{
        @include set-value(big);
    }
    上面的Sass代码编译出来 会得到下面的信息
    error style.scss (Line 5: Undefined variable: “$margin-".)  所以#{}语法并不是随处可用，尤其不能在Mixin中调用
    而且
    @mixin updated-status{
        margin-top:20px;
        background:#f00;
    }
    $flag:"status";
    .navigation{
        @include updated-#{$flag}
    };
    涉及到mixin混合宏的名字的  也不能调用#{}
    幸运的是，可在@extend中使用插值。如下
    %update-status{
        margin-top:20px;
        background:#f00;
    }
    .selected-status{
        font-weight:bold;
    }
    $flag:"status";
    .navigation{
        @extend %updated-#{$flag};
        @extend .selected-#{$flag};
    }
    上面的Sass代码是可运行的，因为他给了我们力量，可用动态插入.class 和 %placeholder。当然他们不能接受像mixin这样的参数，上面的代码编译出CSS后是下面这样:
    .navigation{
        margin-top:20px;
        background:#f00;
    }
    .selected-status,.navigation{
        font-weight:bold;
    }
22.Sass注释
    Sass注释有2种:
        1.类似CSS的注释方式 使用 ”/* ”开头，结属使用 ”*/ ”
            这种会在编译出来的CSS中显示
        2.类似 JavaScript 的注释方式，使用“//”
            这种类似JS的 不会再编译出来的CSS中显示
23.Sass数据类型
    1.Sass和Js语言类似，也具有自己的数据类型.在Sass中包含以下几种数据类型:
        1.数字 如 1,2,3,等
        2.字符串:有引号字符串或者无引号字符串，如:"foo","bar",baz;
        3.颜色:如:blue,#04a3f9,rgba(255,0,0,0.5);
        4.布尔值:true或者false;
        5.空值:null;
        6.值列表:用空格或者都好分开的 如 1.5em 1em 0 2em
          Helvetica,Arial,sans-serif;
    2.SassScript也支持其他Css属性值(property value),比如Unicode范围，或者!important声明。
        然而Sass不会特殊对待这些属性值，一律视为无符号字符串
        后面两节主要讲解字符串或者值列表类型，其他类型和Js中用法一致.
24.Sass字符串
    1.有引号字符串,如:"lucida Grande"，'http://sass-lang.com';
    2.无引号字符串 (unquoted strings)，如 sans-serifbold。
    在编译CSS文件的时候不会改变其类型。只有一种情况例外，使用#{}插值语句的时候，有引号字符串将被编译为 无引号字符串，这样发女变了在混合之灵(mixin)中引用选择器名。
    @mixin firefox-message($selector){
        body.firefox #{$selector}:before{
            content:"Hi,firefox users!";
        }
    }
    @include firefox-message(".header");
    编译为
    body.firefox .header:before{
        content:"Hi,Firefox users!";
    }

25.Sass值列表
    1.所谓的值列表lists是指Sass如何处理Css中:
        margin:10px 15px 0 0;
    或者 font-face:Helvetica,Arial,sans-serif
    像上面这样通过空格或者都好分开的一系列值，就是值列表。
    事实上，独立的值也被视为值列表，是只包含一个值的值列表。
    2.Sass列表函数赋予了值列表更多功能：
        1.nth函数,可以直接访问值列表之中的某一项
        2.join函数，可以将多个值列表连接在一起
        3.append函数，可以将值列表中添加值
        4.@each规则 能够给值列表中的每个项目添加样式
    3.值列表中可以包含值列表，比如:
    1px 2px,5px 6px是包含了1px 2px和5px 6px 两个值列表的值列表   (类似多维数组)
    当内外层值列表使用相同的分隔式，要用圆括号包裹内层值列表，编译时不会编译任何圆括号，因为CSS不允许那么做。
    (1px 2px)(5px 6px)和1px 2px 5px 6px在编译后的CSS文件中是一样的，但是他们在Sass文件中却有不同的意义，前置是包含两个值列表的值列表，后者是包含4个值的值列表。
    4.可以用()表示空的列表，这样不可以直接编译出CSS，比如编译font-family:()的时候,Sass将会报错，如果值列表中包含空的治疗表或者空值，编译时将清除空值，比如1px 2px () 3px或者1px 2px null 3px 编译的时候会清除空值 




//Sass运算
26.Sass运算--加法
    程序中的运算是常见的一件事情，但是在CSS中能做运算的，到目前为止仅有calc()函数可以。但是在Sass中，运算只是其基本特性之一，Sass中可以做各种数学计算，在接下来的章节中，和大家一起探讨一下Sass的数学运算
        1.加法
        加法是Sass运算中的一种，在变量或者属性中都可以做加法运算，如:
        .box{
            width:20px + 8in;
        }
        编译出来的CSS
        .box{
            width:788px;
        }
        但是对于携带不同类型的单位时，在Sass中计算会报错，如下所示:
        .box{
            width:20px + 1em;   //报错
        }
        编译的时候，编译器会报错"incompatible units:'em' and 'px'."
        试了下：
            1. in mm cm  pt pc px等绝对单位都能运算
            2. ex em rem等相对当前字体的都不能运算
            3. 能换算的都会换算成px像素长度
            4. 不能换算的都会报编译错误
            5. 有个例外就是不加单位的话就相当于0
27.Sass运算--减法
    Sass的减法运算和加法运算类似，我们通过一个简单的实例来做阐述:
    $full-width:960px;
    $sidebar-width:200px;
    .content{
        width:$full-width - $siderbar-width;
    }
    编译出来的CSS如下
    .content{
        width:760px;
    }
    同上面加法，在运算时遇到不同类型的单位时，编译也会报错.
    $full-width:960px;
    .content{
        width:$full-width - 1em;
    }
    编译的时候 会报错
28.Sass运算 乘法
    Sass中的乘法运算和前面介绍的加法和减法运算略有不同.虽然他也能够支持多种单位(比如em,px,%),但当一个单位同事声明两个值时会有问题.比如:
    .box{
        width:10px * 2px;
    }
    编译的时候会报错 如果乘法运算时，两个值的单位相同时，只需要为一个数值提供单位即可。
    于是上面的代码可以改成
    .box{
        width:10px * 2;
    }
    编译出来的CSS
    .box{
        width:20px;
    }
    Sass的乘法运算和加法，减法一样。在运算中有不同类型的单位时  也会报错  ，具体可以看加法里面的描述  26点
    .box{
        width:20px * 2em;  //报错
    }
29.Sass运算 除法
    1.Sass的乘法规则也适用于除法。不过除法运算还有一个特殊之处。因为"/"符号在CSS中已经作为一种符号使用，所以在Sass中，直接使用"/"作为除号时，将不会生效。编译时既得不到我们想要的效果，也不会报错。一起来看看。
    .box{
        width:100px/2;
    }
    编译出来的CSS 如下:
    .box{
        width:100px/2;
    }
    这样的结果对于大家来说没有任何意义，要修正这个问题，只需要给外面添加一个小括号就可以
    .box{
        width:(100px/2);
    }
    编译出来的CSS如下
    .box{
        width:50px;
    }

    2.除了第一种情况带有小括号，"/"符号会当做除法运算符之外，如果"/"符号在已有的数学表达式中，也会被认作除法符号，如下:
    .box{
        width:100px / 2 + 2in;
    }
    编译出来的CSS
    .box{
        width:242px;
    }
    另外，在Sass除法运算中，当用变量进行除法运算时，"/"符号也会自动被识别成除法，如下面所示:
    $width:1000px;
    $nums:10;
    .item{
        width:$width / 10;
    }
    .list{
        width:$width / $nums;
    }
    编译出来的CSS:
    .item{
        width:100px;
    }
    .list{
        width:100px;
    }
    总结一下:"/"符号被当做除法运算符有一下3种情况:
        1.如果数值或者其他任意部分是储存在一个变量中或者是函数的返回值。
        2.如果数值被圆括号包围.
        3.如果数值是另一个数学表达式的一部分
        如下所示
        //SCSS
        p {
        font: 10px/8px;             // 纯 CSS，不是除法运算
        $width: 1000px;
        width: $width/2;            // 使用了变量，是除法运算
        width: round(1.5)/2;        // 使用了函数，是除法运算
        height: (500px/2);          // 使用了圆括号，是除法运算
        margin-left: 5px + 8px/2px; // 使用了加（+）号，是除法运算
        }
    3.Sass 的除法运算还有一个情况。我们先回忆一下，在乘法运算时，如果两个值带有相同单位时，做乘法运算时，出来的结果并不是我们需要的结果。但在除法运算时，如果两个值带有相同的单位值时，除法运算之后会得到一个不带单位的数值。如下所示:
    .box{
        width:(100px / 10px);
    }
    编译出来的CSS
    .box{
        width:10;
    }

30.Sass 变量计算
    在Sass中除了可以使用数值进行运算之外，还可以使用变量进行计算。其实在前面的张杰的事例中也或多或少向大家展示了，在Sass中使用变量进行计算，这使得Sass的数学运算功能变得更加实用，一起来看一个简单的事例:
    $content-width:720px;
    $sidebar-width:220px;
    $gutter:20px;
    .container{
        width:$content-width + $sidebar - width + $gutter;
        margin:0 auto;
    }
    编译出来的CSS:
    .container{
        width:960px;
        margin:0 auto;
    }

31.Sass数字运算
    在 Sass 运算中数字运算是较为常见的，数字运算包括前面介绍的：加法、减法、乘法和除法等运算。而且还可以通过括号来修改他们的运算先后顺序。和我们数学运算是一样的，一起来看个示例。
    .box{
        width:((220px + 720px) - 11 * 20) / 12;
    }
    编译出来的CSS
    .box{
        width:60px;
    }

32.Sass 颜色运算
    所有算数运算都支持颜色值，并且是分段运算的，也就是说红，绿，蓝各色分段单独运算:
    p{
        color:#010203 + #040506;
    }
    计算公式为 01 + 04 = 05、02 + 05 = 07 和 03 + 06 = 09， 并且被合成为：
    因此编译出来的CSS如下:
    p{
        color:#050709;
    }
    算数运算也能将数字和颜色值一起运算,同样也是分段运算的。
    如：p{
        color:#010203 * 2;
    }
    计算公式为 01 * 2 = 02、02 * 2 = 04 和 03 * 2 = 06， 并且被合成为:
    p{
        color:#020406
    }

33.Sass  字符运算
    1.在Sass中可以通过加法符号 "+"来拼接字符串。例如:
    $content:"Hello"+""+"Sass!";
    .box:before{
        content:" #{$content} ";
    }
    编译出来的CSS
    .box:before{
        content:" Hello Sass! ";
    }
    
    2.除了在变量中做字符串的拼接外，还可以直接通过 + 好  把字符串链接在一起
    div{
        cursor: e + -resize;
    }
    编译出来的CSS
    div{
        cursor:e-risize;
    }
    注意，如果有引号的字符串被添加了一个没有引号的字符串 （也就是，带引号的字符串在 + 符号左侧）， 结果会是一个有引号的字符串。 同样的，如果一个没有引号的字符串被添加了一个有引号的字符串 （没有引号的字符串在 + 符号左侧）， 结果将是一个没有引号的字符串。
    p:before {
        content: "Foo " + Bar;
        font-family: sans- + "serif";
    }
    编译出来的CSS
    p:before{
        content:"Foo Bar";
        font-family: sans-serif;
    }